trControl$classProbs
classLevels
make.names(classLevels)
y
levels(y)
undebug("train")
titan_train_y <- as.factor(ifelse(titan_train$Survived == 1, "survived", "dead"))
xb_model_caret <- train(x = titan_train_x,
y = titan_train_y,
method = "xgbTree",
tuneGrid = xb_tune_grid,
trControl = xb_control)
xb_tune_grid <- expand.grid(nrounds = 1000,
eta = c(0.01, 0.05, 0.1),
min_child_weight = 1,
gamma = 0,
colsample_bytree = 1,
max_depth = c(2, 4, 5, 8, 10),
subsample = 1,
objective = "binary:logistic")
xb_model_caret <- train(x = titan_train_x,
y = titan_train_y,
method = "xgbTree",
tuneGrid = xb_tune_grid,
trControl = xb_control)
xb_tune_grid <- expand.grid(nrounds = 1000,
eta = c(0.01, 0.05, 0.1),
min_child_weight = 1,
gamma = 0,
colsample_bytree = 1,
max_depth = c(2, 4, 5, 8, 10),
subsample = 1)
xb_control <- trainControl(method = "repeatedcv", repeats = 1, number = 3,
classProbs = TRUE,
allowParallel = TRUE)
xb_model_caret <- train(x = titan_train_x,
y = titan_train_y,
method = "xgbTree",
tuneGrid = xb_tune_grid,
trControl = xb_control,
objective = "binary:logistic")
warnings()
xb_model_caret
plot(xb_model_caret)
titan_train
titan_test
titan_test$Survived <- "?"
titan_test$Survived <- 0
plot(varImp(xb_model_caret))
titan_train <- read_csv("Downloads/train.csv")
titan_test <- read_csv("Downloads/test.csv")
titan_test$Survived <- 0
titan_train <- rbind(titan_train, titan_test)
titan_train
min(titan_test$PassengerId)
mean_age <- titan_train %>%
group_by(Sex, Pclass) %>%
summarise(Age = mean(Age, na.rm = TRUE))
titan_train %<>% left_join(mean_age, by = c("Sex" = "Sex",
"Pclass" = "Pclass"))
titan_train$Age <- ifelse(is.na(titan_train$Age.x), titan_train$Age.y, titan_train$Age.x)
titan_train$Embarked[is.na(titan_train$Embarked)] <- "S"
titan_train$title <- str_extract(titan_train$Name, "\\w*\\.")
titan_train$is_alone <- ifelse((titan_train$SibSp + titan_train$Parch) == 0, 1, 0)
predict(xb_model_caret, titan_test)
titan_train
summary(titan_train)
filter(titan_train, is.NA(fare))
filter(titan_train, is.na(fare))
filter(titan_train, is.na(Fare))
titan_train$Fare[is.na(titan_train$Fare)] <- mean(titan_train$Fare, na.rm = TRUE)
summary(titan_train)
titan_train_x <- model.matrix(~as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_train_y <- as.factor(ifelse(titan_train$Survived == 1, "survived", "dead"))
filter(titan_train, PassengerId <= 891)
filter(titan_train_x, PassengerId <= 891)
titan_train_x
titan_train_x[1:892]
titan_train_x[1:892,]
titan_train
titan_test
titan_train_x <- titan_train_x[1:891,]
titan_train_y <- titan_train_y[1:891,]
titan_train_y <- titan_train_y[1:891]
titan_train_x <- model.matrix(~as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_train_y <- as.factor(ifelse(titan_train$Survived == 1, "survived", "dead"))
tail(titan_test)
titan_pred_x <- titan_train_x[892:1309,]
titan_train_x
titan_train
titan_train_x <- model.matrix(~as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_train_x <- model.matrix(~PassengerId + as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_train_y <- as.factor(ifelse(titan_train$Survived == 1, "survived", "dead"))
titan_train[1]
titan_train_x[1]
titan_train_x[,1]
length(titan_train_y)
dim(titan_train_x)
titan_train_x[1,]
titan_train[,1]
titan_train_x[,1]
titan_train_x[,1]<892
titan_train_x <- sparse.model.matrix(~PassengerId + as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
library(glmnet)
titan_train_x <- sparse.model.matrix(~PassengerId + as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_train_x
titan_train
titan_dummy <- dummyVars(titan_train_x <- sparse.model.matrix(~PassengerId + as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_dummy <- dummyVars(~PassengerId + as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_dummy
?dummyVars
titan_train_x$Survived <- as.factor(ifelse(titan_train$Survived == 1, "survived", "dead"))
titan_train$Survived <- as.factor(ifelse(titan_train$Survived == 1, "survived", "dead"))
titan_dummy <- dummyVars(Survived~PassengerId + as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_dummy
set.seed(1)
xb_control <- trainControl(method = "repeatedcv", repeats = 1, number = 3,
classProbs = TRUE,
allowParallel = TRUE)
xb_tune_grid <- expand.grid(nrounds = 1000,
eta = c(0.01, 0.05, 0.1),
min_child_weight = 1,
gamma = 0,
colsample_bytree = 1,
max_depth = c(2, 4, 5, 8, 10),
subsample = 1)
xb_model_caret <- train(titan_dummy,
data = filter(titan_train, PassengerId <= 891),
method = "xgbTree",
tuneGrid = xb_tune_grid,
trControl = xb_control,
objective = "binary:logistic")
xb_model_caret <- train(titan_dummy,
y = titan_train_y[892:1309]
data = filter(titan_train, PassengerId <= 891),
method = "xgbTree",
tuneGrid = xb_tune_grid,
trControl = xb_control,
objective = "binary:logistic")
xb_model_caret <- train(titan_dummy,
y = titan_train_y[892:1309],
data = filter(titan_train, PassengerId <= 891),
method = "xgbTree",
tuneGrid = xb_tune_grid,
trControl = xb_control,
objective = "binary:logistic")
xb_model_caret <- train(titan_dummy,
y = titan_train_y[1:891],
data = filter(titan_train, PassengerId <= 891),
method = "xgbTree",
tuneGrid = xb_tune_grid,
trControl = xb_control,
objective = "binary:logistic")
titan_train_x <- sparse.model.matrix(~PassengerId + as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_train_x
titan_train
filter(titan_train, is.na(Pclass))
filter(titan_train, is.na(Sex))
filter(titan_train, is.na(Age))
titan_train <- read_csv("Downloads/train.csv")
titan_test <- read_csv("Downloads/test.csv")
titan_gender <- read_csv("Downloads/gender_submission.csv")
titan_test$Survived <- 0
titan_train <- rbind(titan_train, titan_test)
mean_age <- titan_train %>%
group_by(Sex, Pclass) %>%
summarise(Age = mean(Age, na.rm = TRUE))
titan_train %<>% left_join(mean_age, by = c("Sex" = "Sex",
"Pclass" = "Pclass"))
titan_train$Age <- ifelse(is.na(titan_train$Age.x), titan_train$Age.y, titan_train$Age.x)
titan_train$Embarked[is.na(titan_train$Embarked)] <- "S"
titan_train$title <- str_extract(titan_train$Name, "\\w*\\.")
titan_train$is_alone <- ifelse((titan_train$SibSp + titan_train$Parch) == 0, 1, 0)
titan_train$Fare[is.na(titan_train$Fare)] <- mean(titan_train$Fare, na.rm = TRUE)
titan_train$Survived <- as.factor(ifelse(titan_train$Survived == 1, "survived", "dead"))
titan_train
mean_age
titan_train <- read_csv("Downloads/train.csv")
titan_test <- read_csv("Downloads/test.csv")
titan_gender <- read_csv("Downloads/gender_submission.csv")
titan_test$Survived <- 0
titan_train <- rbind(titan_train, titan_test)
mean_age <- titan_train %>%
group_by(Sex, Pclass) %>%
summarise(Age = mean(Age, na.rm = TRUE))
library(dplyr)
mean_age <- titan_train %>%
group_by(Sex, Pclass) %>%
summarise(Age = mean(Age, na.rm = TRUE))
titan_train
titan_train %<>% left_join(mean_age, by = c("Sex" = "Sex",
"Pclass" = "Pclass"))
detach("package:plyr", unload=TRUE)
detach("package:dplyr", unload=TRUE)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mean_age <- titan_train %>%
group_by(Sex, Pclass) %>%
summarise(Age = mean(Age, na.rm = TRUE))
titan_train %<>% left_join(mean_age, by = c("Sex" = "Sex",
"Pclass" = "Pclass"))
titan_train
titan_train$Age <- ifelse(is.na(titan_train$Age.x), titan_train$Age.y, titan_train$Age.x)
titan_train$Embarked[is.na(titan_train$Embarked)] <- "S"
titan_train$title <- str_extract(titan_train$Name, "\\w*\\.")
titan_train$is_alone <- ifelse((titan_train$SibSp + titan_train$Parch) == 0, 1, 0)
titan_train$Fare[is.na(titan_train$Fare)] <- mean(titan_train$Fare, na.rm = TRUE)
titan_train$Survived <- as.factor(ifelse(titan_train$Survived == 1, "survived", "dead"))
titan_train
titan_train[is.na(titan_train)]
titan_train[!complete.cases(titan_train)]
complete.cases(titan_train)
titan_train[!complete.cases(titan_train),]
titan_train$Cabin[is.na(titan_train$Cabin)] <- "unk"
titan_train[!complete.cases(titan_train),]
titan_train$Age.x <- "na"
titan_train[!complete.cases(titan_train),]
titan_train_x <- model.matrix(~as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_pred_x <- titan_train_x[892:1309,]
titan_train_x <- titan_train_x[1:891,]
titan_train_y <- titan_train_y[1:891]
length(titan_train_y)
titan_train_x
xb_control <- trainControl(method = "repeatedcv", repeats = 1, number = 3,
classProbs = TRUE,
allowParallel = TRUE)
xb_tune_grid <- expand.grid(nrounds = 1000,
eta = c(0.01, 0.05, 0.1),
min_child_weight = 1,
gamma = 0,
colsample_bytree = 1,
max_depth = c(2, 4, 5, 8, 10),
subsample = 1)
xb_model_caret <- train(titan_train_x,
y = titan_train_y,
method = "xgbTree",
tuneGrid = xb_tune_grid,
trControl = xb_control,
objective = "binary:logistic")
predict(xb_model_caret, titan_pred_x)
xg_pred <- ifelse(predict(xb_model_caret, titan_pred_x)=="survived", 1, 0
)
xg_pred <- as.factor(ifelse(predict(xb_model_caret, titan_pred_x)=="survived", 1, 0))
xg_pred
out5 <- data.frame(PassengerId = titan_gender$PassengerId,
Survived = xg_pred)
write_csv(out5, "titanic_kaggle_v5.csv")
xb_model
xb_model_caret
plot(varImp(xb_model_caret))
library(readr)
library(tidyverse)
library(magrittr)
library(caret)
library(ranger)
library(xgboost)
library(stringr)
titan_train <- read_csv("Downloads/train.csv")
titan_test <- read_csv("Downloads/test.csv")
titan_gender <- read_csv("Downloads/gender_submission.csv")
ggplot(titan_train, aes(x = as.factor(Survived), y = Age)) + geom_boxplot() + facet_grid(~Pclass)
ggplot(titan_train, aes(x = Age, col = as.factor(Pclass))) + geom_histogram() + facet_grid(~Survived)
plot(titan_train[c('Survived', "Fare")])
titan_test$Survived <- 0
titan_train <- rbind(titan_train, titan_test)
mean_age <- titan_train %>%
group_by(Sex, Pclass) %>%
summarise(Age = mean(Age, na.rm = TRUE))
titan_train %<>% left_join(mean_age, by = c("Sex" = "Sex",
"Pclass" = "Pclass"))
titan_train$Age <- ifelse(is.na(titan_train$Age.x), titan_train$Age.y, titan_train$Age.x)
titan_train$Embarked[is.na(titan_train$Embarked)] <- "S"
titan_train$title <- str_extract(titan_train$Name, "\\w*\\.")
titan_train$is_alone <- ifelse((titan_train$SibSp + titan_train$Parch) == 0, 1, 0)
titan_train$Fare[is.na(titan_train$Fare)] <- mean(titan_train$Fare, na.rm = TRUE)
titan_train$Survived <- as.factor(ifelse(titan_train$Survived == 1, "survived", "dead"))
titan_train$Cabin[is.na(titan_train$Cabin)] <- "unk"
titan_train$Age.x <- "na"
titan_train_x <- model.matrix(~as.factor(Pclass) + Sex + SibSp + Parch + Fare + Embarked + Age + title + is_alone, data = titan_train)
titan_pred_x <- titan_train_x[892:1309,]
titan_train_x <- titan_train_x[1:891,]
titan_train_y <- titan_train_y[1:891]
titan_train
titan_train_y <- titan_train[1:891, "Survived"]
xb_control <- trainControl(method = "repeatedcv", repeats = 1, number = 3,
classProbs = TRUE,
allowParallel = TRUE)
svm.tune <- train(x = titan_train_x,
y = titan_train_y,
method = "svmRadial",
tuneLength = 9,
preProc = c("center", "scale"),
metric = "ROC",
trControl = xb_control)
svm.tune <- train(x = titan_train_x,
y = titan_train_y,
method = "svmRadial",
tuneLength = 9,
preProc = c("center", "scale"),
metric = "ROC",
trControl = xb_control)
summary(titan_train)
debug(train)
svm.tune <- train(x = titan_train_x,
y = titan_train_y,
method = "svmRadial",
tuneLength = 9,
preProc = c("center", "scale"),
metric = "ROC",
trControl = xb_control)
svm.tune <- train(x = titan_train_x,
y = titan_train_y,
method = "svmRadial",
tuneLength = 9,
preProc = c("center", "scale"),
metric = "ROC",
trControl = xb_control)
x
dim(x)
dim(y)
debug(check_dims)
class(y)
class(y)[i]
class(y)[1]
length(y)
undebug(check_dime)
undebug(check_dims)
undebug(train)
titan_train_y <- titan_train[[1:891, "Survived"]]
titan_train_y <- as.vector(titan_train[1:891, "Survived"])
titan_train_y
titan_train_y <- unlist(titan_train[1:891, "Survived"])
set.seed(1)
svm.tune <- train(x = titan_train_x,
y = titan_train_y,
method = "svmRadial",
tuneLength = 9,
preProc = c("center", "scale"),
metric = "ROC",
trControl = xb_control)
svm.tune
svm_pred <- as.factor(ifelse(predict(svm.tune, titan_pred_x) == "survived", 1, 0))
out6 <- data.frame(PassengerId = titan_gender$PassengerId,
Survived = svm_pred)
write_csv(out6, "titanic_kaggle_v6.csv")
write_csv
out6
svm.tune
plot(svm.tune)
svm.tune2 <- train(x = titan_train_x,
y = titan_train_y,
method = "svmLinear",
preProc = c("center", "scale"),
metric = "ROC",
trControl = xb_control)
svm.tune2
best_tune <- resamples(list(svm = svm.tune, svm.tune2))
best_tune$values
bwplot(best_tune, metric = "ROC", ylab = c("linear", "radial"))
summary(best_tune)
svm.tune2
svm.tune
svm_pred2 <- as.factor(ifelse(predict(svm.tune2, titan_pred_x) == "survived", 1, 0))
out7 <- data.frame(PassengerId = titan_gender$PassengerId,
Survived = svm_pred2)
write_csv(out7, "titanic_kaggle_v6.csv")
set.seed(1)
svm.tune2 <- train(x = titan_train_x,
y = titan_train_y,
method = "svmLinear",
preProc = c("center", "scale"),
metric = "ROC",
trControl = xb_control)
svm.tune2
?resamples
set.seed(1)
svm.tune <- train(x = titan_train_x,
y = titan_train_y,
method = "svmRadial",
tuneLength = 9,
preProc = c("center", "scale"),
metric = "ROC",
trControl = xb_control)
set.seed(1)
svm.tune2 <- train(x = titan_train_x,
y = titan_train_y,
method = "svmLinear",
preProc = c("center", "scale"),
metric = "ROC",
trControl = xb_control)
best_tune <- resamples(list(svm = svm.tune, svm.tune2))
best_tune
svm.tune
svm.tune2
svm_pred2 <- as.factor(ifelse(predict(svm.tune2, titan_pred_x) == "survived", 1, 0))
out7 <- data.frame(PassengerId = titan_gender$PassengerId,
Survived = svm_pred2)
write_csv(out7, "titanic_kaggle_v6.csv")
write_csv(out7, "titanic_kaggle_v7.csv")
write_csv(out7, "titanic_kaggle_v7.csv")
plot(svm.tune)
plot(svm.tune2)
summary(best_tune)
best_tune <- resamples(list(radial = svm.tune, linear = svm.tune2))
summary(best_tune)
bwplot(best_tune, metric = "ROC")
best_tune$values
.80383*418
.76555*418
891/3
require(dplyr)
library(tidyverse)
library(caret)
library(ggfortify)
install.packages("ggfortify")
install.packages("GGally")
install.packags("xgboost")
install.packages("xgboost")
library(ggfortify)
library(GGally)
setwd("Documents/Russian Housing Kaggle")
full_train_set <- read_csv("train.csv")
full_test_set <- read_csv("test.csv")
macro_environment <- read_csv("macro.csv")
head(full_train_set)
summary(full_train_set$timestamp)
macro_environment
full_train_set$price_doc %>% qplot(geom = "histogram")
full_train_set$price_doc %>% summary()
full_train_set$price_doc
ggplot(full_train_set, aes(x= price_doc)) + geom_histogram()
full_train_set
library(lubridate)
full_train_set$year <- year(full_train_set$timestamp)
full_train_set$month <- month(full_train_set$timestamp)
ggplot(full_train_set, aes(x = year, y = price_doc)) + geom_boxplot()
ggplot(full_train_set, aes(x = as.factor(year(), y = price_doc)) + geom_boxplot()
library(plotly)
ggplotly(ggplot(full_train_set, aes(x = as.factor(year), y = price_doc)) + geom_boxplot())
ggplot(full_train_set, aes(x = full_sq, y = price_doc)) + geom_point()
ggplotly(ggplot(full_train_set, aes(x = full_sq, y = price_doc)) + geom_point())
ggplotly(ggplot(full_train_set, aes(x = life_sq, y = price_doc)) + geom_point())
ggplot(full_train_set, aes(x = life_sq, y = price_doc)) + geom_point()
ggplot(full_train_set, aes(x = life_sq, y = price_doc)) + geom_point() + xlim(2000)
ggplot(full_train_set, aes(x = life_sq, y = price_doc), limits(x = 2000)) + geom_point()
ggplot(full_train_set, aes(x = life_sq, y = price_doc)) + geom_point() + coord_cartesian(xlim = c(0, 1000))
ggplot(full_train_set, aes(x = life_sq, y = price_doc)) + geom_point() + coord_cartesian(xlim = c(0, 250))
ggplot(full_train_set, aes(x = full_sq, y = price_doc)) + geom_point() + coord_cartesian(xlim = c(0, 250))
lm_life <- lm(price_doc ~ full_sq, data = full_train_set)
lm_life <- lm(price_doc ~ full_sq, data = full_train_set)
lm_life <- lm(price_doc ~ life_sq, data = full_train_set)
lm_full <- lm(price_doc ~ full_sq, data = full_train_set)
lm_life <- lm(price_doc ~ life_sq, data = full_train_set)
summary(lm_life)
summary(lm_full)
lm_both <- lm(price_doc ~ full_sq + life_sq, full_train_set)
lm_both
summary(lm_both)
lm_both <- lm(price_doc ~ full_sq + max_floor, full_train_set)
summary(lm_both)
lm_both <- lm(price_doc ~ max_floor, full_train_set)
summary(lm_both)
summary(full_train_set$max_floor)
full_train_set$max_floor[1:5]
full_train_set$max_floor[1:6]
full_train_set$max_floor[60:100]
full_train_set$max_floor %>% table()
lm_both <- lm(price_doc ~ as.dbl(max_floor), full_train_set)
ggplot(full_train_set, aes(x = max_floor, y = price_doc)) + geom_boxplot()
ggplot(full_train_set, aes(x = wall_material, y = price_doc)) + geom_boxplot()
ggplot(full_train_set, aes(x = material, y = price_doc)) + geom_boxplot()
ggplotly(ggplot(full_train_set, aes(x = material, y = price_doc)) + geom_boxplot())
lm_both <- lm(price_doc ~ build_year, full_train_set)
lm_both
summary(lm_both)
lm_both <- lm(price_doc ~ kitchen_sq, full_train_set)
lm_both <- lm(price_doc ~ kitch_sq, full_train_set)
summary(lm_both)
full_train_set <- read_csv("train.csv", col_types = list(kitch_sq = col_double(),
build_year = col_double(),
max_floor = col_double()))
lm_both <- lm(price_doc ~ kitch_sq, full_train_set)
summary(lm_both)
lm_both <- lm(price_doc ~ max_floor, full_train_set)
summary(lm_both)
ggplot(full_train_set, aes(x = kitch_sq, y = price_doc)) + geom_point()
ggplot(full_train_set, aes(x = kitch_sq, y = price_doc)) + geom_point() + coord_cartesian(xlim = c(0, 250))
ggplot(full_train_set, aes(x = build_year, y = price_doc)) + geom_point() + coord_cartesian(xlim = c(0, 250))
ggplot(full_train_set, aes(x = max_floor, y = price_doc)) + geom_point() + coord_cartesian(xlim = c(0, 250))
ggplot(full_train_set, aes(x = max_floor, y = price_doc)) + geom_point(alpha = 0.4) + coord_cartesian(xlim = c(0, 250))
ggplot(full_train_set, aes(x = max_floor, y = price_doc)) + geom_point(alpha = 0.3) + coord_cartesian(xlim = c(0, 250))
ggplot(full_train_set, aes(x = sub_area, y = price_doc)) + geom_boxplot()
ggplot(full_train_set, aes(x = sub_area, y = price_doc)) + geom_boxplot() + coord_flip()
ggplot(full_train_set, aes(x = num_room, y = price_doc)) + geom_point(alpha = 0.3) + coord_cartesian(xlim = c(0, 250))
class(full_train_set$num_room)
full_train_set <- read_csv("train.csv", col_types = list(kitch_sq = col_double(),
build_year = col_double(),
max_floor = col_double(),
num_room = col_double()))
ggplot(full_train_set, aes(x = num_room, y = price_doc)) + geom_point(alpha = 0.3) + coord_cartesian(xlim = c(0, 250))
summmary(full_train_set$build_year)
summary(full_train_set$build_year)
ggplot(full_train_set, aes(x = build_year, y = price_doc)) + geom_point(alpha = 0.3))
ggplot(full_train_set, aes(x = build_year, y = price_doc)) + geom_point(alpha = 0.3)
full_train_set$`build_count_1921-1945`
full_train_set$`build_count_1921-1945`
full_train_set$build_year <- ifelse(full_train_set$build_year < 1000, NA, ifelse(full_train_set$build_year > 2018, NA, full_train_set$build_year))
ggplot(full_train_set, aes(x = build_year, y = price_doc)) + geom_point() + coord_cartesian(xlim = c(0, 250))
ggplot(full_train_set, aes(x = build_year, y = price_doc)) + geom_point())
ggplot(full_train_set, aes(x = build_year, y = price_doc)) + geom_point()
ggplot(full_train_set, aes(x = full_sq, y = price_doc, col = build_year)) + geom_point()
ggplotly(ggplot(full_train_set, aes(x = full_sq, y = price_doc, col = build_year)) + geom_point())
